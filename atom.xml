<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>efinedxq</title>
  
  <subtitle>渐行渐远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://efinedxq.github.io/"/>
  <updated>2018-02-02T06:46:34.547Z</updated>
  <id>https://efinedxq.github.io/</id>
  
  <author>
    <name>efinedxq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>清华-10-二叉树遍历</title>
    <link href="https://efinedxq.github.io/uncategorized/%E6%B8%85%E5%8D%8E-10-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <id>https://efinedxq.github.io/uncategorized/清华-10-二叉树遍历/</id>
    <published>2018-02-02T06:46:34.000Z</published>
    <updated>2018-02-02T06:46:34.547Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>清华-09-球的半径和体积</title>
    <link href="https://efinedxq.github.io/uncategorized/%E6%B8%85%E5%8D%8E-09-%E7%90%83%E7%9A%84%E5%8D%8A%E5%BE%84%E5%92%8C%E4%BD%93%E7%A7%AF/"/>
    <id>https://efinedxq.github.io/uncategorized/清华-09-球的半径和体积/</id>
    <published>2018-02-02T06:46:18.000Z</published>
    <updated>2018-02-02T06:46:18.264Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>清华-08-成绩排序</title>
    <link href="https://efinedxq.github.io/uncategorized/%E6%B8%85%E5%8D%8E-08-%E6%88%90%E7%BB%A9%E6%8E%92%E5%BA%8F/"/>
    <id>https://efinedxq.github.io/uncategorized/清华-08-成绩排序/</id>
    <published>2018-02-02T06:45:55.000Z</published>
    <updated>2018-02-02T06:45:55.747Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>清华-07-整数拆分</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/%E6%B8%85%E5%8D%8E-07-%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/"/>
    <id>https://efinedxq.github.io/题解/牛客/清华/清华-07-整数拆分/</id>
    <published>2018-02-02T06:45:42.000Z</published>
    <updated>2018-02-03T06:21:08.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个整数总可以拆分为2的幂的和，例如： 7=1+2+4 7=1+2+2+2 7=1+1+1+4 7=1+1+1+2+2 7=1+1+1+1+1+2 7=1+1+1+1+1+1+1 总共有六种不同的拆分方式。 再比如：4可以拆分成：4 = 4，4 = 1 + 1 + 1 + 1，4 = 2 + 2，4=1+1+2。 用f(n)表示n的不同拆分的种数，例如f(7)=6. 要求编写程序，读入n(不超过1000000)，输出f(n)%1000000000。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>每组输入包括一个整数：N(1&lt;=N&lt;=1000000)。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>对于每组数据，输出f(n)%1000000000。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>7<br>输出<br>6</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>把数都提前算出来，之后直接输出答案。<br>有规律，如果是奇数，那么前一个数是偶数，偶数的组合方式</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//很讨巧，为啥是这样？</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> dp[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">   dp[<span class="number">0</span>]=<span class="number">0</span>;dp[<span class="number">1</span>]=<span class="number">1</span>;dp[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= len; i ++) &#123;</span><br><span class="line">        dp[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//奇数</span></span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            dp[i] = (dp[i<span class="number">-1</span>])%<span class="number">1000000000</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//偶数</span></span><br><span class="line">            dp[i] = (dp[i<span class="number">-1</span>]+dp[i/<span class="number">2</span>])%<span class="number">1000000000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//果然运行超时</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> sum,<span class="keyword">int</span> i,<span class="keyword">int</span> len, <span class="keyword">int</span> &amp;cnt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(sum==n)&#123;</span><br><span class="line">   cnt=(cnt+<span class="number">1</span>)%<span class="number">1000000000</span>;</span><br><span class="line">   <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(; i &lt;= len; i ++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(sum+<span class="built_in">pow</span>(<span class="number">2</span>,i)&gt;n) <span class="keyword">return</span> ;</span><br><span class="line">   sum+=<span class="built_in">pow</span>(<span class="number">2</span>,i);</span><br><span class="line">   dfs(n,sum,i,n-<span class="built_in">pow</span>(<span class="number">2</span>,i),cnt);</span><br><span class="line">   sum-=<span class="built_in">pow</span>(<span class="number">2</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> ans =<span class="number">0</span>;</span><br><span class="line">   dfs(n,<span class="number">0</span>,<span class="number">0</span>,n,ans);</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;一个整数总可以拆分为2的幂的和，例如： 7=1+2+4 7=1+2+2+2 7=1+1+1+4 7=1+1+1+2+2 7=
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="清华" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/"/>
    
    
      <category term="数学" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="动态规划" scheme="https://efinedxq.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>清华-06-手机键盘</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/%E6%B8%85%E5%8D%8E-06-%E6%89%8B%E6%9C%BA%E9%94%AE%E7%9B%98/"/>
    <id>https://efinedxq.github.io/题解/牛客/清华/清华-06-手机键盘/</id>
    <published>2018-02-02T06:45:25.000Z</published>
    <updated>2018-02-02T07:07:29.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>按照手机键盘输入字母的方式，计算所花费的时间 如：a,b,c都在“1”键上，输入a只需要按一次，输入c需要连续按三次。 如果连续两个字符不在同一个按键上，则可直接按，如：ad需要按两下，kz需要按6下 如果连续两字符在同一个按键上，则两个按键之间需要等一段时间，如ac，在按了a之后，需要等一会儿才能按c。 现在假设每按一次需要花费一个时间段，等待时间需要花费两个时间段。 现在给出一串字符，需要计算出它所需要花费的时间。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>一个长度不大于100的字符串，其中只有手机按键上有的小写字母</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>输入可能包括多组数据，对于每组数据，输出按出Input所给字符串所需要的时间</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>bob<br>www</p></blockquote><p>输出</p><blockquote><p>7<br>7</p></blockquote><hr><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ol><li>记录下上次是哪个按键。</li><li>找到该字母在按键的哪个位置。</li></ol><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//好笨的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> preK = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;=<span class="string">'a'</span>&amp;&amp;s[i]&lt;=<span class="string">'c'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preK==<span class="number">2</span>) ans+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'a'</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'b'</span>) ans +=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> ans+=<span class="number">3</span>;</span><br><span class="line">            preK = <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">'d'</span>&amp;&amp;s[i]&lt;=<span class="string">'f'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preK==<span class="number">3</span>) ans+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'d'</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'e'</span>) ans +=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> ans+=<span class="number">3</span>;</span><br><span class="line">            preK = <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">'g'</span>&amp;&amp;s[i]&lt;=<span class="string">'i'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preK==<span class="number">4</span>) ans+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'g'</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'h'</span>) ans +=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> ans+=<span class="number">3</span>;</span><br><span class="line">            preK = <span class="number">4</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">'j'</span>&amp;&amp;s[i]&lt;=<span class="string">'l'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preK==<span class="number">5</span>) ans+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'j'</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'k'</span>) ans +=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> ans+=<span class="number">3</span>;</span><br><span class="line">            preK = <span class="number">5</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">'m'</span>&amp;&amp;s[i]&lt;=<span class="string">'o'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preK==<span class="number">6</span>) ans+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'m'</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'n'</span>) ans +=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> ans+=<span class="number">3</span>;</span><br><span class="line">            preK = <span class="number">6</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">'p'</span>&amp;&amp;s[i]&lt;=<span class="string">'s'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preK==<span class="number">7</span>) ans+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'p'</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'q'</span>) ans +=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'r'</span>) ans +=<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> ans+=<span class="number">4</span>;</span><br><span class="line">            preK = <span class="number">7</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">'t'</span>&amp;&amp;s[i]&lt;=<span class="string">'v'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preK==<span class="number">8</span>) ans+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'t'</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'u'</span>) ans +=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> ans+=<span class="number">3</span>;</span><br><span class="line">            preK = <span class="number">8</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(preK==<span class="number">9</span>) ans+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'w'</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'x'</span>) ans +=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'y'</span>) ans +=<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> ans+=<span class="number">4</span>;</span><br><span class="line">            preK = <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;按照手机键盘输入字母的方式，计算所花费的时间 如：a,b,c都在“1”键上，输入a只需要按一次，输入c需要连续按三次。 如果
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="清华" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/"/>
    
    
      <category term="字符串" scheme="https://efinedxq.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="枚举" scheme="https://efinedxq.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>清华-05-质因数的个数</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/%E6%B8%85%E5%8D%8E-05-%E8%B4%A8%E5%9B%A0%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://efinedxq.github.io/题解/牛客/清华/清华-05-质因数的个数/</id>
    <published>2018-02-02T06:44:54.000Z</published>
    <updated>2018-02-02T07:03:58.388Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>求正整数N(N&gt;1)的质因数的个数。 相同的质因数需要重复计算。如120=2<em>2</em>2<em>3</em>5，共有5个质因数。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>可能有多组测试数据，每组测试数据的输入是一个正整数N，(1&lt;N&lt;10^9)。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>对于每组数据，输出N的质因数的个数。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入<br>120<br>输出<br>5</p><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>质因数的个数。首先看到数据是正数范围内，所以不考虑大数问题。在处理质因数的时候，一个质因数可能出现多次，所以把一个质因数消完再找下一个。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li><p>未处理，超时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超时</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  ans = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            n /= i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改后</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); i ++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(n%i==<span class="number">0</span>) &#123;</span><br><span class="line">            n=n/i;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>) ans++;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;求正整数N(N&amp;gt;1)的质因数的个数。 相同的质因数需要重复计算。如120=2&lt;em&gt;2&lt;/em&gt;2&lt;em&gt;3&lt;/em&gt;
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="清华" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/"/>
    
    
      <category term="数学" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="质因数" scheme="https://efinedxq.github.io/tags/%E8%B4%A8%E5%9B%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>清华-04-反序输出</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/%E6%B8%85%E5%8D%8E-04-%E5%8F%8D%E5%BA%8F%E8%BE%93%E5%87%BA/"/>
    <id>https://efinedxq.github.io/题解/牛客/清华/清华-04-反序输出/</id>
    <published>2018-02-02T06:44:38.000Z</published>
    <updated>2018-02-02T06:58:07.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入任意4个字符(如：abcd)， 并按反序输出(如：dcba)</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>题目可能包含多组用例，每组用例占一行，包含4个任意的字符。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>对于每组输入,请输出一行反序后的字符串。<br>具体可见样例。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>Upin<br>cvYj<br>WJpw<br>cXOA</p></blockquote><p>输出</p><blockquote><p>nipU<br>jYvc<br>wpJW<br>AOXc</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>代码1只是为了AC，并没有实质性的将字符串反转过来。代码2，是临时写的，没有测试。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>没有实质反转</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = s.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>; i --)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>反转<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = s.length()<span class="number">-1</span>, j=<span class="number">0</span>;j&lt;i; i --,j++)&#123;</span><br><span class="line">        swap(s[i],s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;输入任意4个字符(如：abcd)， 并按反序输出(如：dcba)&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;输入描述&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="清华" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/"/>
    
    
      <category term="字符串" scheme="https://efinedxq.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="反序" scheme="https://efinedxq.github.io/tags/%E5%8F%8D%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>清华-03-代理服务器</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/%E6%B8%85%E5%8D%8E-03-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://efinedxq.github.io/题解/牛客/清华/清华-03-代理服务器/</id>
    <published>2018-02-02T06:44:15.000Z</published>
    <updated>2018-02-02T06:50:49.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><pre><code>使用代理服务器能够在一定程度上隐藏客户端信息，从而保护用户在互联网上的隐私。我们知道n个代理服务器的IP地址，现在要用它们去访问m个服务器。这 m 个服务器的 IP 地址和访问顺序也已经给出。系统在同一时刻只能使用一个代理服务器，并要求不能用代理服务器去访问和它 IP地址相同的服务器（不然客户端信息很有可能就会被泄露）。在这样的条件下，找到一种使用代理服务器的方案，使得代理服务器切换的次数尽可能得少。</code></pre><p>输入描述:<br>    每个测试数据包括 n + m + 2 行。<br>    第 1 行只包含一个整数 n，表示代理服务器的个数。<br>    第 2行至第n + 1行每行是一个字符串，表示代理服务器的 IP地址。这n个 IP地址两两不相同。<br>    第 n + 2 行只包含一个整数 m，表示要访问的服务器的个数。<br>    第 n + 3 行至第 n + m + 2 行每行是一个字符串，表示要访问的服务器的 IP 地址，按照访问的顺序给出。<br>    每个字符串都是合法的IP地址，形式为“xxx.yyy.zzz.www”，其中任何一部分均是0–255之间的整数。输入数据的任何一行都不包含空格字符。<br>     其中，1&lt;=n&lt;=1000，1&lt;=m&lt;=5000。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><pre><code>可能有多组测试数据，对于每组输入数据， 输出数据只有一行，包含一个整数s，表示按照要求访问服务器的过程中切换代理服务器的最少次数。第一次使用的代理服务器不计入切换次数中。若没有符合要求的安排方式，则输出-1。</code></pre><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>3<br>166.111.4.100<br>162.105.131.113<br>202.112.128.69<br>6<br>72.14.235.104<br>166.111.4.100<br>207.46.19.190<br>202.112.128.69<br>162.105.131.113<br>118.214.226.52</p></blockquote><p>输出</p><blockquote><p>1</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>枚举，每次找到能达到要求最长的代理IP，并记下这时服务IP位置，作为下一次搜索的开始，如此反复枚举，直到遍历完服务IP为止。<br>其中注意点，n为1且不能达到要求时，返回-1；达到最后一个服务IP时返回0。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">string</span> pox[], <span class="keyword">int</span> m, <span class="built_in">string</span> svr[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pox[i]==svr[j])&#123;</span><br><span class="line">                len = j &gt; len?j:len;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;len!=<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+solution(n,pox,m-len,svr+len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;使用代理服务器能够在一定程度上隐藏客户端信息，从而保护用户在互联网上的隐私。我们知道n个代理服务器的IP地址
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="清华" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/"/>
    
    
      <category term="枚举" scheme="https://efinedxq.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="递归" scheme="https://efinedxq.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="暴力" scheme="https://efinedxq.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>牛客-清华-02-约数的个数</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/%E7%89%9B%E5%AE%A2-%E6%B8%85%E5%8D%8E-02-%E7%BA%A6%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://efinedxq.github.io/题解/牛客/清华/牛客-清华-02-约数的个数/</id>
    <published>2018-01-28T07:11:43.000Z</published>
    <updated>2018-01-28T07:23:54.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入n个整数,依次输出每个数的约数的个数</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入的第一行为N，即数组的个数(N&lt;=1000)<br>接下来的1行包括N个整数，其中每个数的范围为(1&lt;=Num&lt;=1000000000)<br>当N=0时输入结束。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>可能有多组输入数据，对于每组输入数据，<br>输出N行，其中每一行对应上面的一个数的约数的个数。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>5<br>1 3 4 6 12</p></blockquote><p>输出</p><blockquote><p>1<br>2<br>3<br>4<br>6</p></blockquote><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n) &#123;</span><br><span class="line"><span class="keyword">while</span>(n--) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(m); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a = m%i;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(i*i==m) cnt++;</span><br><span class="line"><span class="keyword">else</span> cnt+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中循环部分还可以这么写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i*i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(m%i==<span class="number">0</span>) &#123;</span><br><span class="line">cnt+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i*i==m) cnt++;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;输入n个整数,依次输出每个数的约数的个数&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; cl
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="清华" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/"/>
    
    
      <category term="数组" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="数学" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="约数" scheme="https://efinedxq.github.io/tags/%E7%BA%A6%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>牛客-清华-01-成绩排序</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/%E7%89%9B%E5%AE%A2-%E6%B8%85%E5%8D%8E-01-%E6%88%90%E7%BB%A9%E6%8E%92%E5%BA%8F/"/>
    <id>https://efinedxq.github.io/题解/牛客/清华/牛客-清华-01-成绩排序/</id>
    <published>2018-01-28T07:11:23.000Z</published>
    <updated>2018-01-28T07:21:04.623Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>输入任意（用户，成绩）序列，可以获得成绩从高到低或从低到高的排列,相同成绩都按先录入排列在前的规则处理。</p><hr><h3 id="例示："><a href="#例示：" class="headerlink" title="例示："></a>例示：</h3><p>输入：</p><blockquote><p>jack      70<br>   peter     96<br>   Tom       70<br>   smith     67</p></blockquote><p>   输出：</p><ol><li><p>从高到低  成绩            </p><blockquote><p>peter     96<br>jack      70<br>Tom       70<br>smith     67    </p></blockquote></li><li><p>从低到高</p><blockquote><p>smith     67<br>Tom       70<br>jack      70<br>peter     96      </p></blockquote></li></ol><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入多行，先输入要排序的人的个数，然后输入排序方法0（降序）或者1（升序）再分别输入他们的名字和成绩，以一个空格隔开</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>按照指定方式输出名字和成绩，名字和成绩之间以一个空格隔开</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>3<br>0<br>fang 90<br>yang 50<br>ning 70</p></blockquote><p>输出</p><blockquote><p>fang 90<br>ning 70<br>yang 50</p></blockquote><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">float</span> scor;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 升序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmpASC</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *c,<span class="keyword">const</span> <span class="keyword">void</span> *d)</span> </span>&#123;</span><br><span class="line">    Node a = *(Node*)c;</span><br><span class="line">    Node b = *(Node*)d;</span><br><span class="line">    <span class="keyword">return</span> a.scor &gt;= b.scor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 降序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmpDES</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *c,<span class="keyword">const</span> <span class="keyword">void</span> *d)</span> </span>&#123;</span><br><span class="line">    Node a = *(Node*)c;</span><br><span class="line">    Node b = *(Node*)d;</span><br><span class="line">    <span class="keyword">return</span> a.scor &lt;= b.scor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    Node node[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">float</span> a;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;a;</span><br><span class="line">        node[i].name = s;</span><br><span class="line">        node[i].scor = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>) &#123;</span><br><span class="line">        qsort(node,n,<span class="keyword">sizeof</span>(node[<span class="number">0</span>]),cmpDES);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        qsort(node,n,<span class="keyword">sizeof</span>(node[<span class="number">0</span>]),cmpASC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;node[i].name&lt;&lt;<span class="string">" "</span>&lt;&lt;node[i].scor&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边代码，不知道哪里出错，oj上提示指针溢出。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  直接插入排序，ac</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">float</span> scor;</span><br><span class="line">&#125; stu[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="keyword">float</span> a;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;a;</span><br><span class="line">            stu[i].name = s;</span><br><span class="line">            stu[i].scor = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>) &#123; <span class="comment">//降序</span></span><br><span class="line">            Node tem;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,j; i &lt; n; i ++) &#123;</span><br><span class="line">                tem = stu[i];</span><br><span class="line">                <span class="keyword">for</span>(j = i; j&gt;<span class="number">0</span>&amp;&amp; stu[j<span class="number">-1</span>].scor&lt;tem.scor; j--) &#123;</span><br><span class="line">                    stu[j] = stu[j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                stu[j] = tem;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//升序</span></span><br><span class="line">            Node tem;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,j; i &lt; n; i ++) &#123;</span><br><span class="line">                tem = stu[i];</span><br><span class="line">                <span class="keyword">for</span>(j = i; j&gt;<span class="number">0</span>&amp;&amp; stu[j<span class="number">-1</span>].scor&gt;tem.scor; j--) &#123;</span><br><span class="line">                    stu[j] = stu[j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                stu[j] = tem;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;stu[i].name&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[i].scor&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;输入任意（用户，成绩）序列，可以获得成绩从高到低或从低到高的排列,相同成绩都按先录入排列在前的规则处理。&lt;/p&gt;
&lt;hr&gt;

      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="清华" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E6%B8%85%E5%8D%8E/"/>
    
    
      <category term="排序" scheme="https://efinedxq.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="结构体" scheme="https://efinedxq.github.io/tags/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-复数集合</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-%E5%A4%8D%E6%95%B0%E9%9B%86%E5%90%88/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-复数集合/</id>
    <published>2018-01-28T06:44:33.000Z</published>
    <updated>2018-01-30T01:38:05.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个复数（x+iy）集合，两种操作作用在该集合上：     1、Pop 表示读出集合中复数模值最大的那个复数，如集合为空 输出  empty  ，不为空就输出最大的那个复数并且从集合中删除那个复数，再输出集合的大小SIZE；     2 Insert a+ib  指令（a，b表示实部和虚部），将a+ib加入到集合中 ，输出集合的大小SIZE；     最开始要读入一个int n，表示接下来的n行每一行都是一条命令。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入有多组数据。<br>每组输入一个n(1&lt;=n&lt;=1000)，然后再输入n条指令。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>根据指令输出结果。<br>模相等的输出b较小的复数。<br>a和b都是非负数。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>3<br>Pop<br>Insert 1+i2<br>Pop</p></blockquote><p>输出</p><blockquote><p>empty<br>SIZE = 1<br>1+i2<br>SIZE = 0</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>处理字符串，关于字符串，cstring 和 string 是不一样的。用cin输入的字符串，就要用string库函数，输出也要用cout，是对应的；不然会出错。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">float</span> mode;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; rhs) <span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;mode&lt;rhs.mode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> t, c;</span><br><span class="line">    priority_queue&lt;Node&gt; numQ;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">if</span>(!t.compare(<span class="string">"Pop"</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(numQ.empty())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"empty"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Node num = numQ.top();</span><br><span class="line">numQ.pop();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num.a&lt;&lt;<span class="string">"+i"</span>&lt;&lt;num.b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"SIZE = "</span>&lt;&lt;numQ.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   Node num;</span><br><span class="line">   <span class="keyword">int</span> a =<span class="number">0</span>, b =<span class="number">0</span>;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%d+i%d"</span>,&amp;a,&amp;b);</span><br><span class="line">   num.a = a;</span><br><span class="line">   num.b = b;</span><br><span class="line">   num.mode = <span class="built_in">sqrt</span>(a*a+b*b);</span><br><span class="line">   numQ.push(num);</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"SIZE = "</span>&lt;&lt;numQ.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;一个复数（x+iy）集合，两种操作作用在该集合上：     1、Pop 表示读出集合中复数模值最大的那个复数，如集合为空 输
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="优先队列" scheme="https://efinedxq.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="数学" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="复数" scheme="https://efinedxq.github.io/tags/%E5%A4%8D%E6%95%B0/"/>
    
      <category term="类排序" scheme="https://efinedxq.github.io/tags/%E7%B1%BB%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-找最小数</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-%E6%89%BE%E6%9C%80%E5%B0%8F%E6%95%B0/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-找最小数/</id>
    <published>2018-01-28T06:44:18.000Z</published>
    <updated>2018-01-28T07:03:16.492Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>第一行输入一个数n，1 &lt;= n &lt;= 1000，下面输入n行数据，每一行有两个数，分别是x y。输出一组x y，该组数据是所有数据中x最小，且在x相等的情况下y最小的。 </p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入有多组数据。<br>每组输入n，然后输入n个整数对。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>输出最小的整数对。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>5<br>3 3<br>2 2<br>5 5<br>2 1<br>3 6</p></blockquote><p>输出</p><blockquote><p>2 1</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>开始想用结构体把数先存下来再做比较，觉得结构体排序有点繁琐。观察题目再没有别的要求，于是就没有把数存都存下来，只存了最大。输入完结果也就出来了。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, ansA,ansB;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;ansA,&amp;ansB);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(a&lt;ansA)&#123;</span><br><span class="line">ansA = a;</span><br><span class="line">ansB = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==ansA&amp;&amp;b&lt;ansB)&#123;</span><br><span class="line">ansB = b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ansA,ansB);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;第一行输入一个数n，1 &amp;lt;= n &amp;lt;= 1000，下面输入n行数据，每一行有两个数，分别是x y。输出一组x y
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="数组" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="比较查找" scheme="https://efinedxq.github.io/tags/%E6%AF%94%E8%BE%83%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-查找2</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-%E6%9F%A5%E6%89%BE2/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-查找2/</id>
    <published>2018-01-28T06:43:57.000Z</published>
    <updated>2018-01-28T11:06:22.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入数组长度 n 输入数组      a[1…n] 输入查找个数m 输入查找数字b[1…m]   输出 YES or NO  查找有则YES 否则NO 。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入有多组数据。<br>每组输入n，然后输入n个整数，再输入m，然后再输入m个整数（1&lt;=m,n&lt;=100）。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>如果在n个数组中输出YES否则输出NO。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>5<br>1 5 2 4 3<br>3<br>2 5 6</p></blockquote><p>输出</p><blockquote><p>YES<br>YES<br>NO</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>利用Map，时间查找一个数时间复杂度O(1)</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, a,b;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; hashMap;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">hashMap[a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(hashMap[b])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;输入数组长度 n 输入数组      a[1…n] 输入查找个数m 输入查找数字b[1…m]   输出 YES or NO 
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="数组" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="查找" scheme="https://efinedxq.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="map" scheme="https://efinedxq.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-查找</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-%E6%9F%A5%E6%89%BE/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-查找/</id>
    <published>2018-01-28T06:43:48.000Z</published>
    <updated>2018-01-28T06:59:56.214Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>读入一组字符串（待操作的），再读入一个int n记录记下来有几条命令，总共有2中命令：1、翻转  从下标为i的字符开始到i+len-1之间的字符串倒序；2、替换  命中如果第一位为1，用命令的第四位开始到最后的字符串替换原读入的字符串下标 i 到 i+len-1的字符串。每次执行一条命令后新的字符串代替旧的字符串（即下一条命令在作用在得到的新字符串上）。     命令格式：第一位0代表翻转，1代表替换；第二位代表待操作的字符串的起始下标int i；第三位表示需要操作的字符串长度int len。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入有多组数据。<br>每组输入一个字符串（不大于100）然后输入n，再输入n条指令（指令一定有效）。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>根据指令对字符串操作后输出结果。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>bac<br>2<br>003<br>112as</p></blockquote><p>输出</p><blockquote><p>cab<br>cas</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>字符串反转，字符串替换</li><li>要读懂题意，替换是指，整个从i到i+len-1，替换成第四位后边的串，不管长度是否一致。比如：abcd，中b替换成hjkl，就成了ahjklcd。</li></ol><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; commens;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="built_in">string</span> cm;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;cm;</span><br><span class="line">commens.push_back(cm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; commens.size(); i ++)&#123;</span><br><span class="line"><span class="built_in">string</span> t = commens[i];</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">0</span>]==<span class="string">'0'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = t[<span class="number">1</span>]-<span class="string">'0'</span>, k = t[<span class="number">1</span>]-<span class="string">'0'</span>+t[<span class="number">2</span>]-<span class="string">'0'</span><span class="number">-1</span>; j &lt; k; j++,k--)&#123;</span><br><span class="line"><span class="keyword">char</span> ch = s[j];</span><br><span class="line">s[j] = s[k];</span><br><span class="line">s[k] = ch;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> start = t[<span class="number">1</span>] - <span class="string">'0'</span>, len = t[<span class="number">2</span>]-<span class="string">'0'</span>;</span><br><span class="line">t.erase(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">s.replace(start,len,t);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;读入一组字符串（待操作的），再读入一个int n记录记下来有几条命令，总共有2中命令：1、翻转  从下标为i的字符开始到i+
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="字符串" scheme="https://efinedxq.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-二叉排序树</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-二叉排序树/</id>
    <published>2018-01-28T06:36:13.000Z</published>
    <updated>2018-01-28T06:49:28.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一系列整数，建立二叉排序数，并进行前序，中序，后序遍历。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入第一行包括一个整数n(1&lt;=n&lt;=100)。<br>接下来的一行包括n个整数。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>可能有多组测试数据，对于每组数据，将题目所给数据建立一个二叉排序树，并对二叉排序树进行前序、中序和后序遍历。<br>每种遍历结果输出一行。每行最后一个数据之后有一个空格。</p><p>输入中可能有重复元素，但是输出的二叉树遍历序列中重复元素不用输出。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>5<br>1 6 5 9 8</p></blockquote><p>输出</p><blockquote><p>1 6 5 9 8<br>1 5 6 8 9<br>5 8 9 6 1 </p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>注意点：<br>    1.知道结构体及指针的基本使用方法<br>    2.用while(scanf()!=EOF)作为输入！</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> *<span class="title">left</span>, *<span class="title">right</span>;</span></span><br><span class="line">&#125; BiTNode,BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function">BiTree* <span class="title">Insert</span><span class="params">(BiTree* t, <span class="keyword">int</span> tem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="literal">NULL</span>) &#123;</span><br><span class="line">t = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">t-&gt;data = tem;</span><br><span class="line">t-&gt;left = t-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(tem &lt; t-&gt;data) &#123;</span><br><span class="line">t-&gt;left = Insert(t-&gt;left,tem);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(tem &gt; t-&gt;data) &#123;</span><br><span class="line">t-&gt;right = Insert(t-&gt;right,tem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 先序遍历 中左右</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outP</span><span class="params">(BiTree* t)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,t-&gt;data);</span><br><span class="line"><span class="keyword">if</span>(t-&gt;left!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">outP(t-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;right!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">outP(t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 中序遍历 左中右</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outM</span><span class="params">(BiTree* t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;left) &#123;</span><br><span class="line">outM(t-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;t-&gt;data&lt;&lt;" ";</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,t-&gt;data);</span><br><span class="line"><span class="keyword">if</span>(t-&gt;right) &#123;</span><br><span class="line">outM(t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 后序遍历 左右中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outE</span><span class="params">(BiTree* t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;left) &#123;</span><br><span class="line">outE(t-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;right) &#123;</span><br><span class="line">outE(t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,t-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,tem,i;</span><br><span class="line">BiTree *T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF) &#123;</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>( i = <span class="number">0</span>; i&lt;n; i ++) &#123;</span><br><span class="line"><span class="comment">//cin&gt;&gt;tem;</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tem);</span><br><span class="line">T = Insert(T,tem);</span><br><span class="line">&#125;</span><br><span class="line">outP(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">outM(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">outE(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;输入一系列整数，建立二叉排序数，并进行前序，中序，后序遍历。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;输入描述&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="二叉排序树" scheme="https://efinedxq.github.io/tags/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"/>
    
      <category term="结构体" scheme="https://efinedxq.github.io/tags/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
      <category term="指针" scheme="https://efinedxq.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
      <category term="树遍历" scheme="https://efinedxq.github.io/tags/%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-树查找</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-%E6%A0%91%E6%9F%A5%E6%89%BE/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-树查找/</id>
    <published>2018-01-26T13:42:24.000Z</published>
    <updated>2018-01-26T14:08:33.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一棵树，输出某一深度的所有节点，有则输出这些节点，无则输出EMPTY。该树是完全二叉树。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入有多组数据。<br>每组输入一个n(1&lt;=n&lt;=1000)，然后将树中的这n个节点依次输入，再输入一个d代表深度。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>输出该树中第d层得所有节点，节点间用空格隔开，最后一个节点后没有空格。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>4<br>1 2 3 4<br>2</p></blockquote><p>输出</p><blockquote><p>2 3</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p> 深度为1，起点为1；深度为2，起点为2；深度为3，起点为4…<br> 推出深度为d，起点为pow(2,d-1);<br> 这更像一道数学规律题。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, d;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">num.push_back(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">num.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;d;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2</span>,d<span class="number">-1</span>)&gt;=num.size()) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"EMPTY"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="built_in">pow</span>(<span class="number">2</span>,d<span class="number">-1</span>); i&lt;num.size()&amp;&amp;i&lt;<span class="built_in">pow</span>(<span class="number">2</span>,d); i++) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num[i];</span><br><span class="line"><span class="keyword">if</span>(i&lt;num.size()<span class="number">-1</span>&amp;&amp;i&lt;<span class="built_in">pow</span>(<span class="number">2</span>,d)<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;有一棵树，输出某一深度的所有节点，有则输出这些节点，无则输出EMPTY。该树是完全二叉树。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="数组" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="二叉树" scheme="https://efinedxq.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-打牌</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-%E6%89%93%E7%89%8C/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-打牌/</id>
    <published>2018-01-26T13:42:09.000Z</published>
    <updated>2018-01-26T14:05:12.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>牌只有1到9，手里拿着已经排好序的牌a，对方出牌b，用程序判断手中牌是否能够压过对方出牌。  规则：出牌牌型有5种   [1]一张 如4 则5…9可压过 [2]两张 如44 则55，66，77，…，99可压过 [3]三张 如444 规则如[2] [4]四张 如4444 规则如[2] [5]五张 牌型只有12345 23456 34567 45678 56789五个，后面的比前面的均大。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入有多组数据。<br>每组输入两个字符串(字符串大小不超过100)a，b。a字符串代表手中牌，b字符串代表处的牌。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>压过输出YES 否则NO。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>12233445566677<br>33</p></blockquote><p>输出</p><blockquote><p>YES</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>按照规则，分为两种况:一种是顺子，一种就是重复。</p><ol><li>顺子时候。先将a串去重复。然后再初步判断第一张牌是否大于，大于时，再比较后四张牌。</li><li>重复。判断第一张牌是否大于，大于时，再比较b.length()长度的牌。</li></ol><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> a, b, c;</span><br><span class="line"><span class="keyword">bool</span> flags = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(b.length()&lt;<span class="number">5</span>&amp;&amp;b.length()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length()-b.length()+<span class="number">1</span>;i ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;b[<span class="number">0</span>])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= i+b.length()<span class="number">-1</span>; j ++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(a[j]&gt;b[<span class="number">0</span>]&amp;&amp;a[j]==a[i])&#123;</span><br><span class="line">   flags = <span class="literal">true</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   flags = <span class="literal">false</span>; </span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flags) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; a.length(); i ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==a[i<span class="number">-1</span>])&#123;</span><br><span class="line">a.erase(i,<span class="number">1</span>);</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;b[<span class="number">0</span>])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; b.length(); j ++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i+j]&gt;b[j]&amp;&amp;a[i+j]-a[i+j<span class="number">-1</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">flags = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">   flags = <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flags) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flags) <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;牌只有1到9，手里拿着已经排好序的牌a，对方出牌b，用程序判断手中牌是否能够压过对方出牌。  规则：出牌牌型有5种   [1
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="数组" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="数学" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-C反转</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-C%E5%8F%8D%E8%BD%AC/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-C反转/</id>
    <published>2018-01-26T13:41:58.000Z</published>
    <updated>2018-01-26T13:56:49.026Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>首先输入一个5 * 5的数组，然后输入一行，这一行有四个数，前两个代表操作类型，后两个数x y代表需操作数据为以x y为左上角的那几个数据。 操作类型有四种：  1 2 表示：90度，顺时针，翻转4个数  1 3 表示：90度，顺时针，翻转9个数  2 2 表示：90度，逆时针，翻转4个数  2 3 表示：90度，逆时针，翻转9个数 </p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入有多组数据。<br>每组输入一个5 * 5的数组，然后输入一行，这一行有四个数，前两个代表操作类型，后两个数x y代表需操作数据为以x y为左上角的那几个数据。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>输出翻转后的数组。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>1 2 3 4 5<br>6 7 8 9 10<br>11 12 13 14 15<br>16 17 18 19 20<br>21 22 23 24 25<br>1 3 1 1</p></blockquote><p>输出</p><blockquote><p>11 6 1 4 5<br>12 7 2 9 10<br>13 8 3 14 15<br>16 17 18 19 20<br>21 22 23 24 25</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>用的方法比较笨，比较暴力，挨个交换。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">6</span>][<span class="number">6</span>], n, m, x, y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">5</span>; i ++ )</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j ++) </span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num[i][j];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;x&gt;&gt;y;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;m==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tem = num[x][y];</span><br><span class="line">num[x][y] = num[x+<span class="number">1</span>][y];</span><br><span class="line">num[x+<span class="number">1</span>][y] = num[x+<span class="number">1</span>][y+<span class="number">1</span>];</span><br><span class="line">num[x+<span class="number">1</span>][y+<span class="number">1</span>] = num[x][y+<span class="number">1</span>];</span><br><span class="line">num[x][y+<span class="number">1</span>] = tem;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;m==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tem = num[x][y];</span><br><span class="line">num[x][y] = num[x+<span class="number">2</span>][y];</span><br><span class="line">num[x+<span class="number">2</span>][y] = num[x+<span class="number">2</span>][y+<span class="number">2</span>];</span><br><span class="line">num[x+<span class="number">2</span>][y+<span class="number">2</span>] = num[x][y+<span class="number">2</span>];</span><br><span class="line">num[x][y+<span class="number">2</span>] = tem;</span><br><span class="line"></span><br><span class="line">tem = num[x][y+<span class="number">1</span>];</span><br><span class="line">num[x][y+<span class="number">1</span>] = num[x+<span class="number">1</span>][y];</span><br><span class="line">num[x+<span class="number">1</span>][y] = num[x+<span class="number">2</span>][y+<span class="number">1</span>];</span><br><span class="line">num[x+<span class="number">2</span>][y+<span class="number">1</span>] = num[x+<span class="number">1</span>][y+<span class="number">2</span>];</span><br><span class="line">num[x+<span class="number">1</span>][y+<span class="number">2</span>] = tem;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>&amp;&amp;m==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tem = num[x][y];</span><br><span class="line">num[x][y] = num[x][y+<span class="number">1</span>];</span><br><span class="line">num[x][y+<span class="number">1</span>] = num[x+<span class="number">1</span>][y+<span class="number">1</span>];</span><br><span class="line">num[x+<span class="number">1</span>][y+<span class="number">1</span>] = num[x+<span class="number">1</span>][y];</span><br><span class="line">num[x+<span class="number">1</span>][y] = tem;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>&amp;&amp;m==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tem = num[x][y];</span><br><span class="line">num[x][y] = num[x][y+<span class="number">2</span>];</span><br><span class="line">num[x][y+<span class="number">2</span>] = num[x+<span class="number">2</span>][y+<span class="number">2</span>];</span><br><span class="line">num[x+<span class="number">2</span>][y+<span class="number">2</span>] = num[x+<span class="number">2</span>][y];</span><br><span class="line">num[x+<span class="number">2</span>][y] = tem;</span><br><span class="line"></span><br><span class="line">tem = num[x][y+<span class="number">1</span>];</span><br><span class="line">num[x][y+<span class="number">1</span>] = num[x+<span class="number">1</span>][y+<span class="number">2</span>];</span><br><span class="line">num[x+<span class="number">1</span>][y+<span class="number">2</span>] = num[x+<span class="number">2</span>][y+<span class="number">1</span>];</span><br><span class="line">num[x+<span class="number">2</span>][y+<span class="number">1</span>] = num[x+<span class="number">1</span>][y];</span><br><span class="line">num[x+<span class="number">1</span>][y] = tem;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>;i ++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j ++)&#123;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;num[i][j];</span><br><span class="line">   <span class="keyword">if</span>(j==<span class="number">5</span>) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;首先输入一个5 * 5的数组，然后输入一行，这一行有四个数，前两个代表操作类型，后两个数x y代表需操作数据为以x y为左上
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="数组" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="数学" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-矩阵幂</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-%E7%9F%A9%E9%98%B5%E5%B9%82/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-矩阵幂/</id>
    <published>2018-01-26T13:41:45.000Z</published>
    <updated>2018-01-26T13:53:46.095Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个n*n的矩阵，求该矩阵的k次幂，即P^k。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>第一行：两个整数n（2&lt;=n&lt;=10）、k（1&lt;=k&lt;=5），两个数字之间用一个空格隔开，含义如上所示。<br>接下来有n行，每行n个正整数，其中，第i行第j个整数表示矩阵中第i行第j列的矩阵元素Pij且（0&lt;=Pij&lt;=10）。另外，数据保证最后结果不会超过10^8。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>对于每组测试数据，输出其结果。格式为：<br>n行n列个整数，每行数之间用空格隔开，注意，每行最后一个数后面不应该有多余的空格。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>2 2<br>9 8<br>9 3<br>输出<br>153 96<br>108 81</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>矩阵相乘，第i行乘以j列</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 矩阵相乘，第a行乘以b列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solut</span><span class="params">(<span class="keyword">int</span> tem[<span class="number">10</span>][<span class="number">10</span>], <span class="keyword">int</span> num[<span class="number">10</span>][<span class="number">10</span>], <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        ans += tem[a][i]*num[i][b];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m,num[<span class="number">10</span>][<span class="number">10</span>],tem[<span class="number">10</span>][<span class="number">10</span>],ans[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;num[i][j];</span><br><span class="line">            ans[i][j] = num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//计算</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; n; k ++)&#123;</span><br><span class="line">               tem[j][k] = ans[j][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//矩阵相乘</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k ++) &#123;</span><br><span class="line">                ans[j][k] = solut(tem,num,j,k,n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans[i][j];</span><br><span class="line">            <span class="keyword">if</span>(j==n<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个n*n的矩阵，求该矩阵的k次幂，即P^k。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="数学" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="矩阵" scheme="https://efinedxq.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>牛客-北邮-查找第K小数</title>
    <link href="https://efinedxq.github.io/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/%E7%89%9B%E5%AE%A2-%E5%8C%97%E9%82%AE-%E6%9F%A5%E6%89%BE%E7%AC%ACK%E5%B0%8F%E6%95%B0/"/>
    <id>https://efinedxq.github.io/题解/牛客/北邮/牛客-北邮-查找第K小数/</id>
    <published>2018-01-26T13:41:23.000Z</published>
    <updated>2018-01-26T13:49:50.155Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>查找一个数组的第K小的数，注意同样大小算一样大。 如  2 1 3 4 5 2 第三小数为3。</p><hr><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>输入有多组数据。<br>每组输入n，然后输入n个整数(1&lt;=n&lt;=1000)，再输入k。</p><hr><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>输出第k小的整数。</p><hr><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入</p><blockquote><p>6<br>2 1 3 5 2 2<br>3<br>输出<br>3</p></blockquote><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先排序，然后遍历数组计数查找。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m,num[<span class="number">1000</span>],cnt=<span class="number">1</span>,ans;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    sort(num,num+n);</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=num[i<span class="number">-1</span>]) cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt==m)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;num[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;查找一个数组的第K小的数，注意同样大小算一样大。 如  2 1 3 4 5 2 第三小数为3。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="题解" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="牛客" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/"/>
    
      <category term="北邮" scheme="https://efinedxq.github.io/categories/%E9%A2%98%E8%A7%A3/%E7%89%9B%E5%AE%A2/%E5%8C%97%E9%82%AE/"/>
    
    
      <category term="数组" scheme="https://efinedxq.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="排序" scheme="https://efinedxq.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="查找" scheme="https://efinedxq.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
</feed>
